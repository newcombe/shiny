swirl.lib()
library("swirl")
swirl()
1:20
pi:10
15:1
?`:`
seq(1,20)
seq(0, 10, by=0.5)
my_seq <- (5, 10, length=30)
my_seq <- seq(5, 10, length=30)
length(my_seq)
l:length(my_seq)
1:length(my_seq)
seq(along.with = my_seq)
seq_along(my_seq)
rep(o, times=40)
rep(0, times=40)
rep(c(0,1,2), times = 10)
rep(c(0, 1, 2), each = 10)
?`:`
?':'
?":"
?"x"
?'*'
cl
swirl()
num_vect <- c(0.5, 55 -10, 6)
num_vect <- c(0.5, 55, -10, 6)
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
past(my_char, collapse = "  ")
paste(my_char, collapse = "  ")
paste(my_char, collapse = " ")
my_name <- c(my_char, "Caroline")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c(1:3), c("X", "Y", "Z"), sep = "")
paste(LETTERS, 1:4, sep = "-")
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000)
my_data <- sample(c(y, z), 100)
my_na <- is.na(my_data)
my_na
my_data == NA
sum(my_na)
my_data
0/0
Inf - Inf
x
x[1:10]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
bye
bye()
swirl()
c(x[3], x[5], x[7])
x[c(3, 5, 7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11, 2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- c(1:20)
my_vector <- [1:20]
my_vector <- 1:20
my_vector
dim(my_vector)
lenth(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol = 5)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
colnames(cnames, my_data)
colnames(my_data, cnames)
?colnames
colnames(my_data) <- cnames
my_data
swirl()
directory(swirl)
?dir
library("swirl")
swirl()
exit()
0
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes[, 19:23]
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7))
flips <- sample(c(0,1), 100, prob = c(0.3, 0.7), replace = TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean = 100, sd = 25)
rpois(5, mean = 10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5,10))
my_pois
cm <- colMeans(my_mois)
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
month(t1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, %B %d %Y %H:%M)
t4 <- strptime(t3, %B %d, %Y %H:%M)
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
(0.75*0.3)/(0.75*0.3+0.48*0.7)
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
33/36
deck
52
4/52
0
12/52
2/52
2/51
0.8
(1.6*0.8)/2
0.64
mypdf
integrate(mypdf, lower=0, upper=1.6)
0.5
1
?sqrt
sqrt(2)
0.997*0.001
(1-0.985)*(1-0.001)
(0.000997)/(0.000997+0.014985)
library(swirl)
swirl()
(1+2+3+4+5+6)/6
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1, mean)
mean(smeans)
library(swirl)
swirl()
dice_sqr
ex2_fair <- dice_sqr * dice_fair
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - 3.5^2
ex2_high < sum(dice_sqr * edh)
ex2_high <- sum(dice_sqr * dice_high)
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(3,5) * 0.8^5 * 0.2^(-2)
choose(5,3) * 0.8^3 * 0.2^(5-3) + choose(5,4) * 0.8^4 * 0.2^(5-4) + choose(5,5) * 0.8^5 * 0.2^(5-5)
?pbinom
pbinom(2, 5, 0.8, FALSE)
qnorm(0.1)
0
(97.5, 3, 2)
qnorm(97.5, 3, 2)
qnorm(.975,mean=3,sd=2)
1.96*2 + 3
pnorm(1200, 1020, 50, FALSE)
pnorm((1200-1020)/50, lower.tail=FALSE)
qnorm(0.75, 1020, 50, lower.tail=TRUE)
0.53
0.53
ppois(3, 3, 10, lower.tail=TRUE, log.p=FALSE)
?ppois
ppois(3, 10, lower.tail=TRUE, log.p=FALSE)
ppois(3, 2.5*4, lower.tail=TRUE, log.p=FALSE)
pbinom(5, 1000, 0.01)
ppois(5, 1000*0.01)
options(rpubs.upload.method = "internal")
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
library("RCurl", lib.loc="~/R/win-library/3.1")
?t.test
wk1 <- c(140, 138, 150, 148, 135)
wk2 <- c(132, 135, 151, 146, 130)
t.test(wk1, wk2, alternative=c("two.sided", "greater", paired=TRUE))
t.test(wk1, wk2, alternative=c("two.sided", "greater"), paired=TRUE))
t.test(wk1, wk2, alternative=c("two.sided", "greater"), paired=TRUE)
t.test(wk1, wk2, alternative="greater", paired=TRUE)
?power.t.test
power.t.test(n=9, delta=0, sd=30, sig.level=0.5, type="one.sample", power=0.95, alernative="two.sided")
power.t.test(n=9, delta=0, sd=30, sig.level=0.5, type="one.sample", power=0.95, alternative="two.sided")
power.t.test(n=9, delta=NULL, sd=30, sig.level=0.5, type="one.sample", power=0.95, alternative="two.sided")
?t.test
data <- c(1,1,1,0)
t.test(data, alternative="greater")
binom.test(data, 4)
binom.test(data)
binom.test(data, 4, p=0.75)
binom.test(data, p=0.75)
binom.test(3, 4, p=0.75)
pbinom
?pbinom
1-pbinom(3, 4, 0.5)
1-pbinom(3, 4, 0.75)
1-pbinom(3, 4, 0.75, lower.tail=FALSE)
10/1787
?t.test
t.test(10/1787, 0.01)
t.test(10/1787, 0.01, alternative="less")
1-pbinom(10, 1787, 0.01, lower.tail=T)
1-pbinom(10, 1787, 0.01, lower.tail=F)
sig2 <- 8*(1.5^2 + 1.8^2)/16
sig2
-4 +c(1,-1) * qt(0.05, df=8)*sqrt(sig2*2/9)
-4 +c(1,-1) * qt(0.01, df=8)*sqrt(sig2*2/9)
?power.t.test
power.t.test(n=100, delta=0.01, sd=0.04, type="one.sample", alt="one.sided")
power.t.test(n=NULL, delta=0.01, sd=0.04, type="one.sample", alt="one.sided", sig.level=0.05)
power.t.test(n=NULL, delta=0.01, sd=0.04, type="one.sample", alt="one.sided", power=0.9)
?t.test
t.test(wk1, wk2, alternative="less", paired=TRUE)
t.test(wk2, wk1, alternative="less", paired=TRUE)
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
for i in 1:4
sig <- 0
moo = 0.3
for (i in 1:4) {}
for (i in 1:4) {
sig <- sig + w }
sig
7/4
x <- c(0.18, -1.54, 0.42, 0.95)
w <- c(2, 1, 3, 1)
sig <- 0
moo <- 0.3
for (i in 1:4) {
sig <- sig + w[, i] * (x[, i] - moo)^2
}
for (i in 1:4) {
sig <- sig + w[i] * (x[i] - moo)^2
}
moo <- 0.1471
sig <- 0
for (i in 1:4) {
sig <- sig + w[i] * (x[i] - moo)^2
}
sig <- 0
moo <- 0.1471
for (i in 1:4) {
sig <- sig + w[i] * (x[i] - moo)^2
}
sig <- 0
moo <- 0.0025
for (i in 1:4) {
sig <- sig + w[i] * (x[i] - moo)^2
}
sig <- 0
moo <- 1.077
for (i in 1:4) {
sig <- sig + w[i] * (x[i] - moo)^2
}
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
?lm
lm(y ~ x)
lm(y ~ x - 1)
lm(y ~ x 0 + 1)
lm(y ~ 0 + x)
data(mtcars)
lm(mpg ~ weight, data = mtcars)
colnames(mtcars)
lm(mpg ~ wt, data = mtcars)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
me <- mean(x)
std <- sd(x)
(x[1] - me)/std
x <- c(8.58, 10.46, 9.01, 9.64, 8.86)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(y ~ x)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
mean(x)
fit <- lm(mpg ~ 1, data = mtcars)
fitd <- lm(mpg ~ 1, data = mtcars)
fitn <- lm(mpg ~ wt, data = mtcars)
summary(fitd)
summary(fitn)
(1.8776/1.063)^2
(0.5591/1.063)^2
?deviance
testfit <- lm(mpg ~ factor(am), mtcars)
summary$coeff(test.fit)
summary$coeff(testfit)
summary(testfit)$coefficients
?summary
?mtcars
lm(mpg ~ . , data=mtcars)
summary(lm(mpg ~ . , data=mtcars))
summary(lm(mpg ~ factor(am) , data=mtcars))
summary(lm(mpg ~ am , data=mtcars))
summary(lm(mpg ~ factor(cyl), data=mtcars))
fit1 <- lm(mpg ~ wt + factor(am) + qsec + factor(cyl), data=mtcars)
summary(fit1)
fit1 <- lm(mpg ~ wt + factor(am), data=mtcars)
summary(fit1)
fit2 <- lm(mpg ~ wt - factor(am), data=mtcars)
summary(fit2)
fit3 <- lm(mpg ~ wt + factor(am) + qsec, data=mtcars)
summary(fit3)
fit4 <- lm(mpg ~ wt + factor(am) + qsec + factor(cyl), data=mtcars)
summary(fit4)
fit1 <- lm(mpg ~ wt + factor(am), data=mtcars)
summary(fit1)
plot(wt, resid(fit1))
plot(mtcars$wt, resid(fit1))
abline(h = 0)
fit2 <- lm(mpg ~ wt + factor(am) + qsec, data=mtcars)
plot(mtcars$wt, resid(fit2))
abline(h = 0)
fit3 <- lm(mpg ~ wt + factor(am) + qsec + factor(cyl), data=mtcars)
abline(h = 0)
plot(mtcars$wt, resid(fit3))
abline(h = 0)
fit0 <- lm(mpg ~ wt, data=mtcars)
plot(mtcars$wt, resid(fit0))
?Rtools
??Rtools
install.packages("Rtools")
install.packages("shiny")
library(shiny)
library(slidify)
library(knitr)
options(rpubs.upload.method = "internal")
install.packages("knitr")
library(knitr)
setwd("~/Coursera/09_Developing Data Products/project/shiny")
setwd("~/Coursera/09_Developing Data Products/project/shiny/pitch_deck")
library(slidify)
setwd("~/Coursera/09_Developing Data Products/project/shiny")
library(devtools)
library(slidify)
author(my_deck)
author("my_deck")
